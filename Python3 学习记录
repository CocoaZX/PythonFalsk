
#语法规范
Python中参数的位置是死的，这点和swift不同。相通点为都有必选参数，默认参数。
参数遵循必选参数、默认参数、可变参数、关键字参数和命名关键字参数、
必选参数和默认参数和swift用法相同，
可变参数    在函数定义时加*前缀，代表传入一个list或者tuple参数（个人感觉像是C思想没有剔除干净，传入了一个地址。事实上在编译中应该也是传入了该参数的内存地址）
关键字参数   在函数定义时加**，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict，所以不会对传入的参数有修改。
命名关键字参数  定义参数时加*，前缀。如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
def person(name, age,*, city, job):


#协程
python中有GIL锁问题，多线程的效率是低下的，python中有了一种替代模式--协程。
协程是一种用户级的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。这样与线程相比（同一个栈），没有同步问题，也没有线程切换系统调用的开销。但是无法利用多核资源，协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上。

python中效率快最推荐的方法，是多进程+协程（可以看作是每个进程里都是单线程，而这个单线程是协程化的）
多进程+协程下，避开了CPU切换的开销，又能把多个CPU充分利用起来，这种方式对于数据量较大的爬虫还有文件读写之类的效率提升是巨大的。
